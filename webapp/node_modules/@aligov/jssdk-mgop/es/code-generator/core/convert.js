import { compile, DEFAULT_OPTIONS } from "json-schema-to-typescript";
import _ from "lodash";

function inferArraySchema(p, childProperties, common) {
  if (Object.keys(childProperties).length !== 0) {
    // 如果有子孙那么肯定是 object
    return [p.name, Object.assign(Object.assign({
      type: "array",
      items: {
        type: "object",
        properties: childProperties,
        // 把 child 的 required 挪到 items 下面
        required: common.required,
        additionalProperties: false
      }
    }, common), {
      required: []
    })];
  } else {
    // 生成 any[]
    return [p.name, Object.assign({
      type: "array"
    }, common)];
  }
}

var removeComment = function (str) {
  return str.replace(/\/\*|\*\//g, "");
};

function interfaceToJSONSchema(itf, scope) {
  var properties = itf[scope + "Properties"];
  properties = [].concat(properties, [{
    name: "dummyroot",
    parentId: -2,
    id: -1,
    scope: scope,
    type: "object"
  }]);

  var formatType = function (type) {
    switch (type) {
      case "1":
        return "string";

      case "2":
        return "number";

      case "3":
        return "number";

      case "4":
        return "number";

      case "5":
        return "number";

      case "6":
        return "boolean";

      case "7":
        return "object";

      case "8":
        return "array";

      case "9":
        return "object";

      default:
        return type;
    }
  };

  function findChildProperties(parentId) {
    return _.chain(properties).filter(function (p) {
      return parseInt(p.parentId) === parseInt(parentId);
    }).map(function (p) {
      var type = formatType(p.type);
      var childProperties = findChildProperties(p.id);
      var childItfs = properties.filter(function (x) {
        return parseInt(x.parentId) === parseInt(p.id);
      });
      var common = {
        // 这里默认所有的属性都有值
        additionalProperties: false,
        // request 的时候按照实际标注，response 全部默认存在
        required: childItfs.filter(function (e) {
          return e.required;
        }).map(function (e) {
          return e.name;
        })
      };
      if (p.description) common.description = removeComment(p.description);

      if (["string", "number", "boolean", "null"].includes(type)) {
        return [p.name, Object.assign({
          type: type
        }, common)];
      } else if (type === "object") {
        return [p.name, Object.assign({
          type: type,
          properties: childProperties
        }, common)];
      } else if (type === "array") {
        return inferArraySchema(p, childProperties, common);
      } else {
        // 解析失败，返回 any
        return [p.name, Object.assign({
          type: ["string", "number", "boolean", "object"]
        }, common)];
      }
    }).fromPairs().value();
  }

  var propertyChildren = findChildProperties(-2);
  var root = propertyChildren["dummyroot"];
  return root;
}

export default function convert(itf) {
  var reqJSONSchema = interfaceToJSONSchema(itf, "request");
  var resJSONSchema = interfaceToJSONSchema(itf, "response");
  var options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), {
    bannerComment: ""
  });
  return Promise.all([compile(reqJSONSchema, "Req", options), compile(resJSONSchema, "Res", options)]);
}