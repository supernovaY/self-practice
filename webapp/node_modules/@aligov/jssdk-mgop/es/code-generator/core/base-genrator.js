import _regeneratorRuntime from "@babel/runtime/regenerator";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { getPackageName } from "../utils";
import convert from "./convert";
import { createModuleHeadHelpStr, creatInterfaceHelpStr } from "./tools";
var packageName = getPackageName();
/**
 * 生成 index.js | index.ts
 */

export function createBaseIndexStr(codeType, info) {
  var host = info.host,
      appKey = info.appKey;
  var commonCode = "\n  import mgop from '" + packageName + "'\n  import createFetch from './systems';\n\n  const defaultFetch = ({ api, data, header={} }) => {\n\n    return new Promise((resolve, reject)=>{\n\n      mgop({\n        api,\n        appKey: \"" + appKey + "\",\n        host: \"" + host + "\",\n        header,\n        data,\n        onFail: (error) => {\n          const message =\n            (error && error.ret && error.ret.join(\",\")) || \"\u670D\u52A1\u8C03\u7528\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5\";\n          reject({ message });\n        },\n        onSuccess: (res) => {\n          resolve(res.data);\n        },\n      })\n\n    })\n\n  }\n\n\n  \n  ";

  if (codeType === "Javascript") {
    return "   \n    import mgop from '" + packageName + "'\n\n    " + commonCode + "\n\n    let fetch = createFetch(defaultFetch);\n\n    const overrideFetch = (baseFetch) => {\n      fetch = createFetch(baseFetch);\n    };\n\n    export { overrideFetch, fetch as default };\n\n";
  } else {
    return "\n\n    " + commonCode + "\n\n    let fetch = createFetch(defaultFetch);\n\n    const overrideFetch = (baseFetch: (params: { api:string; data:any; header?:any })=> Promise<any>) => {\n      fetch = createFetch(baseFetch);\n    };\n\n    export { overrideFetch, fetch as default };\n\n";
  }
}
/** 生成 systems/index.ts */

export function createSystemsIndexStr(codeType, systems) {
  var systemsImportArr = [];
  var systemsExportArr = [];
  systems.forEach(function (_ref) {
    var sysName = _ref.sysName;
    systemsImportArr.push("import " + sysName + " from './" + sysName + "';");
    systemsExportArr.push("..." + sysName + "(baseFetch),");
  });
  var systemsImportStr = systemsImportArr.join("\n");
  var systemsExportStr = systemsExportArr.join("\n");

  if (codeType === "Javascript") {
    return "\n    " + systemsImportStr + "\n\n    export default function (baseFetch) {\n\n      return {\n          " + systemsExportStr + "\n      };\n    }\n  ";
  } else {
    return "\n\n    " + systemsImportStr + "\n\n    export default function (baseFetch: any) {\n\n      return {\n          " + systemsExportStr + "\n      };\n    }\n  ";
  }
}
/** 生成 system/index.ts*/

export function createSystemStr(codeType, system) {
  var apiList = system.apiList;

  if (codeType === "Javascript") {
    return "\n    " + createModuleHeadHelpStr(system) + "\n\n    export default function(sendFetch) {\n      return {\n        " + apiList.map(function (itf) {
      var apiName = itf.apiName;
      return "\n\n            " + creatInterfaceHelpStr(itf) + "\n           '" + apiName + "': (data= {}, header = {}) => {\n    \n              return sendFetch({\n                api: '" + apiName + "',\n                data,\n                header\n              });;\n           }\n          ";
    }) + "\n      }\n    }\n  \n  ";
  } else {
    return "\n    " + createModuleHeadHelpStr(system) + "\n\n    export default function(sendFetch) {\n      return {\n        " + apiList.map(function (itf) {
      var apiName = itf.apiName;
      return "\n\n            " + creatInterfaceHelpStr(itf) + "\n           '" + apiName + "': (data?: IRequestTypes['" + apiName + "'] = {}, header?: any = {}) => {\n    \n              return sendFetch({\n                api: '" + apiName + "',\n                data,\n                header\n              }) as Promise<IResponseTypes['" + apiName + "']>;\n           }\n          ";
    }) + "\n      }\n    }\n  \n  ";
  }
}
/** 生成 system/model.ts */

export function createSystemModelStr(system) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _this = this;

    var apiList, itfStrs;
    return _regeneratorRuntime.wrap(function (_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            apiList = system.apiList;
            _context2.next = 3;
            return Promise.all(apiList.map(function (itf) {
              return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                var _yield$convert, reqItf, resItf, apiName;

                return _regeneratorRuntime.wrap(function (_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return convert(itf);

                      case 2:
                        _yield$convert = _context.sent;
                        reqItf = _yield$convert[0];
                        resItf = _yield$convert[1];
                        apiName = itf.apiName;
                        return _context.abrupt("return", "\n            '" + apiName + "': {\n              Req: " + reqItf.replace(/export (type|interface) Req =?/, "").replace(/;/g, "") + ";\n              Res: " + resItf.replace(/export (type|interface) Res =?/, "").replace(/;/g, "") + ";\n            }\n          ");

                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
            }));

          case 3:
            itfStrs = _context2.sent;
            return _context2.abrupt("return", "\n        " + createModuleHeadHelpStr(system) + "\n\n        export interface IModels {\n            " + itfStrs.join("\n\n") + "\n        };\n\n        " + createRequestTypes(system.apiList) + ";\n\n        " + createResponseTypes(system.apiList) + ";\n  ");

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
}
/** 生成 IResponseTypes */

export function createResponseTypes(interfaces) {
  return "\n    export interface IResponseTypes {\n      " + interfaces.map(function (itf) {
    var apiName = itf.apiName;
    return "\n        '" + apiName + "': IModels['" + apiName + "']['Res']\n      ";
  }) + "\n    }\n  ";
}
/** 生成IRequestTypes */

export function createRequestTypes(interfaces) {
  return "\n    export interface IRequestTypes {\n      " + interfaces.map(function (itf) {
    var apiName = itf.apiName;
    return "\n        '" + apiName + "': IModels['" + apiName + "']['Req']\n      ";
  }) + "\n    }\n\n  \n  \n  ";
}