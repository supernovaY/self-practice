import { md5, token, stringifyQS, logger, webViewEnv, global } from "@aligov/jssdk-utils";
import getHostByEnv from "./env";
import responseCode from "./responseCode";
import universalRquest from "universal-request";
var isWeb = global.isWeb;
var globalInstance = global.getGlobal();
var debug = logger.debug,
    warning = logger.warning;
var getTokenFromCookie = token.getTokenFromCookie,
    getTimeStamp = token.getTimeStamp;
var CONST_VARIABLE = {
  TOKEN_KEY: "_mgw_tk",
  APPKEY: "jl9vupjh+200100201+nytcfro",
  MAX_RETRY_TIMES: 2
};
var _NAME_ = "mgop";
var RET_MESSAGE = "1000::调用成功";
var METHOD = "POST";
var defaultHeader = {};

var Mgop = /*#__PURE__*/function () {
  function Mgop(props) {
    this.times = 0;
    this.config = Object.assign({}, {
      env: "online",
      header: {},
      onSuccess: function onSuccess() {},
      onFail: function onFail() {}
    }, props);
    debug(_NAME_, "Mgop init with params", this.config);
    debug(_NAME_, "@aligov/jssdk-mgop@3.1.5");
  }
  /* 丘比特容器 */


  var _proto = Mgop.prototype;

  _proto.isJupiterJSBridge = function isJupiterJSBridge() {
    var sUserAgent = globalInstance.navigator.userAgent.toLowerCase();
    var bIsJupiter = sUserAgent.indexOf("jupiter") > -1;
    var JupiterJSBridge = globalInstance.JupiterJSBridge;

    if (JupiterJSBridge && bIsJupiter) {
      return true;
    } else {
      return false;
    }
  };

  _proto.createParam = function createParam(data, ret) {
    if (data === void 0) {
      data = {};
    }

    var _this$config$api = this.config.api,
        api = _this$config$api === void 0 ? "" : _this$config$api;
    return {
      api: api,
      data: data,
      ret: typeof ret === "string" ? [ret] : ret
    };
  };

  _proto.createSuccessCb = function createSuccessCb(data) {
    return this.createParam(data, RET_MESSAGE);
  };

  _proto.createFailCb = function createFailCb(ret) {
    return this.createParam({}, ret);
  }
  /**
   * 签名处理
   * @param timestamp
   */
  ;

  _proto.processToken = function processToken(timestamp) {
    /* 网关会在第一次http请求时set-cookie，所以第一次请求肯定是失败的 */
    var token = getTokenFromCookie(CONST_VARIABLE.TOKEN_KEY);
    var appkey = this.config.appKey || CONST_VARIABLE.APPKEY;
    var api = this.config.api || "";
    var stringifyParams = stringifyQS({
      token: token || "",
      ak: appkey,
      api: api,
      ts: timestamp,

      /** 固定传null，遗留git请求逻辑 */
      data: null
    }, false);
    debug(_NAME_, "processToken params", stringifyParams);
    return md5(stringifyParams);
  };

  _proto.processRequestUrl = function processRequestUrl() {
    /* 获取官网的 host */
    var host = getHostByEnv(this.config.env, this.config.host);
    var timestamp = getTimeStamp();
    var sign = this.processToken(timestamp);
    var param = {
      ak: this.config.appKey || CONST_VARIABLE.APPKEY,
      api: this.config.api,
      ts: timestamp,
      sign: sign,

      /** 固定传null，遗留git请求逻辑 */
      data: null
    };
    var query = "" + stringifyQS(param);
    return {
      url: host + "/h5/mgop?" + query,
      query: query
    };
  }
  /**
   * 判断是成功还是失败
   * 成功，调用createSuccessCb
   * 失败，调用createFailCb
   */
  ;

  _proto.processResponseResult = function processResponseResult(response) {
    if (response === void 0) {
      response = {};
    }

    var formatCode = Number(response.rs);

    switch (formatCode) {
      case responseCode.ResultSuccess:
        return this.createSuccessCb(response.data || {});

      case responseCode.FAIL_SYS_TOKEN_EMPTY:
        debug(_NAME_, responseCode.FAIL_SYS_TOKEN_EMPTY, "令牌为空，重试");

        if (this.times < CONST_VARIABLE.MAX_RETRY_TIMES) {
          this.times++;
          return this.processRequest();
        }

        debug(_NAME_, responseCode.FAIL_SYS_TOKEN_EMPTY, "令牌为空，且超过最大重试次数");
        return "";

      default:
        warning(_NAME_, "response fail", formatCode);
        throw this.createFailCb(response.ret);
    }
  };

  _proto.processRequest = function processRequest() {
    var _this = this;

    var _this$processRequestU = this.processRequestUrl(),
        url = _this$processRequestU.url,
        query = _this$processRequestU.query;
    /* 合并 defaultHeader 和 传入的header */


    var headers = defaultHeader;
    Object.assign(headers, this.config.header, {
      "Content-Type": "application/json"
    });
    var _this$config$data = this.config.data,
        data = _this$config$data === void 0 ? {} : _this$config$data;
    /* 判断h5是否在小程序容器内，且AlipayMiniAppCall已经存在 */

    var AlipayMiniAppCall = globalInstance.AlipayMiniAppCall;

    if (isWeb && webViewEnv.isAlipayMini() && AlipayMiniAppCall) {
      var host = getHostByEnv(this.config.env, this.config.host);
      debug(_NAME_, METHOD, "小程序 CORS 跨域请求");
      return AlipayMiniAppCall("mgop", {
        host: host + "/h5/mgop",
        method: METHOD,
        query: query,
        headers: headers,
        data: data
      }).then(function (resp) {
        return _this.processResponse(resp);
      });
    } else {
      /** 其余case：小程序、非丘比特容器h5 */
      debug(_NAME_, METHOD, "universal CORS 跨域请求");
      return universalRquest({
        method: METHOD,
        url: url,
        headers: headers,
        data: data
      }).then(function (resp) {
        return _this.processResponse(resp);
      });
    }
  }
  /** 处理响应体 */
  ;

  _proto.processResponse = function processResponse(resp) {
    var response = resp ? resp.data : null; // 错误处理卡口

    if (!response) {
      throw new Error("返回为空");
    } // 特殊原因，比如ISV修改了xhr的行为，导致response返回为text，则需要转化为json格式


    if (typeof response === "string") {
      response = JSON.parse(response);
    }

    debug(_NAME_, "response", response);
    return this.processResponseResult(response);
  }
  /**
   * 1. H5在浏览器中，会通过Ajax方式发起请求。
   * 2. H5在浙里办客户端、警察叔叔中，会通过客户端原生接口发起请求（MgopPlugin）。
   * 3. H5在小程序容器中，会通过管道函数发起请求。
   * 4. 在小程序中，会调用小程序request发起请求。
   */
  ;

  _proto.request = function request() {
    var _this$config = this.config,
        onFail = _this$config.onFail,
        onSuccess = _this$config.onSuccess,
        api = _this$config.api;
    this.processRequest().then(function (e) {
      debug(_NAME_, "mgop call success", api, e);
      onSuccess(e);
    }).catch(function (e) {
      warning(_NAME_, "mgop call fail", api, e);
      onFail(e);
    });
  }
  /** 丘比特容器 egop */
  ;

  _proto.egop = function egop() {
    var JupiterJSBridge = globalInstance.JupiterJSBridge;
    var _this$config2 = this.config,
        api = _this$config2.api,
        data = _this$config2.data,
        appKey = _this$config2.appKey,
        onSuccess = _this$config2.onSuccess,
        onFail = _this$config2.onFail,
        _this$config2$header = _this$config2.header,
        header = _this$config2$header === void 0 ? {} : _this$config2$header;
    debug(_NAME_, "call jupiter with param", api);
    JupiterJSBridge.call("eGovernmentApi", {
      apiName: "egop",
      params: {
        method: METHOD,
        param: data,
        api: api,
        header: Object.assign(Object.assign(Object.assign({}, defaultHeader), {
          "extra-ak": appKey
        }), header)
      }
    }, function (result) {
      console.log("egop get result:", result); // TODO: 确认 H5 和 端内 返回的数据格式是否相同

      if (typeof result === "string") {
        result = JSON.parse(result);
      }

      var errorCode = result["errorCode"];

      if (errorCode === "0" || errorCode === 0) {
        onSuccess({
          api: api,
          data: result.data || result.result || {},
          ret: [RET_MESSAGE]
        });
      } else {
        onFail(result);
      }
    });
  };

  return Mgop;
}();

export function setDefaultHeader(header) {
  defaultHeader = header;
}
export default function (params) {
  debug(_NAME_, "call mgop with param", params);

  var _mgop = new Mgop(params);

  if (isWeb && _mgop.isJupiterJSBridge()) {
    return _mgop.egop();
  }

  return _mgop.request();
}