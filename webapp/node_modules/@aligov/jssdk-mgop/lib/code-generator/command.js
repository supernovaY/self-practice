#!/usr/bin/env node
"use strict";

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _generator = _interopRequireDefault(require("./generator"));

var _path = require("path");

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _commander = _interopRequireDefault(require("commander"));

var _inquirer = _interopRequireDefault(require("inquirer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

(function () {
  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var mgopSchemaPath, mgopSchema, sdkDir, codeType, _yield$inquirer$promp, type;

    return _regenerator.default.wrap(function (_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _commander.default.option("--sdkDir <sdkDir>", "设置生成 mgop 代码所在目录");

            _commander.default.parse(process.argv);

            mgopSchemaPath = (0, _path.resolve)(process.cwd(), "./mgopSchema.json");

            if (!_fs.default.existsSync(mgopSchemaPath)) {
              console.log(_chalk.default.yellow(" mgopSchema.json \u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u8BF7\u5728\u9879\u76EE\u6839\u76EE\u5F55\u8FDB\u884C\u521B\u5EFA "));
              process.exit(1);
            }

            mgopSchema = require((0, _path.resolve)(process.cwd(), "./mgopSchema.json"));
            sdkDir = (0, _path.resolve)(process.cwd(), _commander.default.sdkDir || "./src/mgopService");

            if (!_fs.default.existsSync((0, _path.resolve)(sdkDir, "index.js"))) {
              _context.next = 10;
              break;
            }

            codeType = "Javascript";
            _context.next = 19;
            break;

          case 10:
            if (!_fs.default.existsSync((0, _path.resolve)(sdkDir, "index.ts"))) {
              _context.next = 14;
              break;
            }

            codeType = "Typescript";
            _context.next = 19;
            break;

          case 14:
            _context.next = 16;
            return _inquirer.default.prompt({
              type: "list",
              name: "请选择代码类型",
              choices: ["Typescript", "Javascript"]
            });

          case 16:
            _yield$inquirer$promp = _context.sent;
            type = _yield$inquirer$promp.请选择代码类型;
            codeType = type;

          case 19:
            _context.next = 21;
            return (0, _generator.default)({
              codeType: codeType,
              mgopSchema: mgopSchema,
              sdkDir: sdkDir
            });

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
})();