"use strict";

exports.__esModule = true;
exports.default = _default;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _ora = _interopRequireDefault(require("ora"));

var _chalk = _interopRequireDefault(require("chalk"));

var _formatter = require("json-schema-to-typescript/dist/src/formatter");

var _jsonSchemaToTypescript = require("json-schema-to-typescript");

var _baseGenrator = require("./core/base-genrator");

var _tools = require("./core/tools");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

/**
 *
 * @param params
 * 检查参数
 */
var checkMgopSchema = function (params) {
  var spinner = (0, _ora.default)(_chalk.default.grey("mgop-generator: 开始参数校验 "));
  spinner.start();
  /** mgop schema 格式校验 */

  var requiredKeys = ["appKey", "host", "systems"];

  for (var _i = 0, _requiredKeys = requiredKeys; _i < _requiredKeys.length; _i++) {
    var key = _requiredKeys[_i];

    if (!params || !params[key]) {
      spinner.fail(_chalk.default.red("mgop-generator: \u8BF7\u914D\u7F6E " + key + " \u53C2\u6570"));
      return false;
    }
  }

  spinner.succeed(_chalk.default.green("mgop-generator: 参数校验成功"));
  return true;
};
/**
 *
 * @param param
 * 生成代码
 */


var generateTemplete = function (_ref) {
  var mgopSchema = _ref.mgopSchema,
      rootDir = _ref.rootDir,
      codeType = _ref.codeType,
      codeStyle = _ref.codeStyle;
  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regenerator.default.mark(function _callee2() {
    var spinner, outputFiles, fileSuffix, systems, baseIndexStr, indexStr, systemsIndexStr, promises;
    return _regenerator.default.wrap(function (_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            spinner = (0, _ora.default)(_chalk.default.grey("mgop-generator:  \u6B63\u5728\u751F\u6210mgop\u6A21\u677F\u4EE3\u7801...."));
            spinner.start();
            outputFiles = [];
            rootDir = rootDir.replace(/\/$/, "");
            fileSuffix = codeType === "Javascript" ? "js" : "ts";
            systems = mgopSchema.systems;
            /**
             * 代码风格
             */

            _jsonSchemaToTypescript.DEFAULT_OPTIONS.style = Object.assign({}, codeStyle);
            _context2.prev = 7;
            baseIndexStr = (0, _baseGenrator.createBaseIndexStr)(codeType, mgopSchema);
            indexStr = "\n      " + (0, _tools.createHeadHelpStr)() + "\n      " + baseIndexStr + "\n    ";
            /**
             * index.ts | index.js 入口文件生成
             */

            outputFiles.push({
              path: rootDir + "/index." + fileSuffix,
              content: (0, _formatter.format)(indexStr, _jsonSchemaToTypescript.DEFAULT_OPTIONS)
            });
            /**
             * systems index.ts | index.js 入口文件创建
             */

            systemsIndexStr = (0, _baseGenrator.createSystemsIndexStr)(codeType, systems);
            outputFiles.push({
              path: rootDir + "/systems/index." + fileSuffix,
              content: (0, _formatter.format)(systemsIndexStr, _jsonSchemaToTypescript.DEFAULT_OPTIONS)
            });
            /**
             * 创建system files
             */

            promises = systems.map(function (system) {
              return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regenerator.default.mark(function _callee() {
                var sysName, systemStr, systemModelStr;
                return _regenerator.default.wrap(function (_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        sysName = system.sysName;
                        _context.next = 3;
                        return (0, _baseGenrator.createSystemStr)(codeType, system);

                      case 3:
                        systemStr = _context.sent;
                        _context.next = 6;
                        return (0, _baseGenrator.createSystemModelStr)(system);

                      case 6:
                        systemModelStr = _context.sent;
                        outputFiles.push({
                          path: rootDir + "/systems/" + sysName + "/index." + fileSuffix,
                          content: (0, _formatter.format)(systemStr, _jsonSchemaToTypescript.DEFAULT_OPTIONS)
                        });

                        if (codeType === "Typescript") {
                          outputFiles.push({
                            path: rootDir + "/systems/" + sysName + "/model." + fileSuffix,
                            content: (0, _formatter.format)(systemModelStr, _jsonSchemaToTypescript.DEFAULT_OPTIONS)
                          });
                        }

                      case 9:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
            });
            _context2.next = 16;
            return Promise.all(promises);

          case 16:
            spinner.succeed(_chalk.default.green("mgop-generator: mgop \u4EE3\u7801\u751F\u6210\u6210\u529F\uFF01"));
            _context2.next = 22;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](7);
            spinner.fail(_chalk.default.red("mgop-generator:  mgop \u4EE3\u7801\u751F\u6210\u5931\u8D25 " + _context2.t0.message));

          case 22:
            return _context2.abrupt("return", outputFiles);

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[7, 19]]);
  }));
};
/**
 *
 * @param outputFiles
 * 文件生成
 */


var generateFile = function (outputFiles) {
  var spinner = (0, _ora.default)(_chalk.default.grey("mgop-generator: 文件生成中... "));
  spinner.start();
  return Promise.all(outputFiles.map(function (_ref2) {
    var path = _ref2.path,
        content = _ref2.content;
    return (0, _utils.writeFile)(path, content);
  })).then(function () {
    spinner.succeed(_chalk.default.green("mgop-generator: \u6587\u4EF6\u751F\u6210\u6210\u529F\uFF01"));
  }).catch(function (err) {
    spinner.fail(_chalk.default.red("mgop-generator: \u6587\u4EF6\u751F\u6210\u5931\u8D25\uFF01" + err.stack));
  });
};

function _default(_ref3) {
  var codeType = _ref3.codeType,
      mgopSchema = _ref3.mgopSchema,
      sdkDir = _ref3.sdkDir,
      _ref3$codeStyle = _ref3.codeStyle,
      codeStyle = _ref3$codeStyle === void 0 ? Object.assign(Object.assign({}, _jsonSchemaToTypescript.DEFAULT_OPTIONS.style), {
    singleQuote: true,
    semi: true,
    trailingComma: "all",
    printWidth: 100,
    bracketSpacing: true
  }) : _ref3$codeStyle;
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator.default.mark(function _callee3() {
    var result, outputFiles;
    return _regenerator.default.wrap(function (_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            /**
             *  参数mgop schema
             */
            result = checkMgopSchema(mgopSchema);

            if (result) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return");

          case 3:
            _context3.next = 5;
            return generateTemplete({
              rootDir: sdkDir,
              codeType: codeType,
              mgopSchema: mgopSchema,
              codeStyle: codeStyle
            });

          case 5:
            outputFiles = _context3.sent;

            /**
             * 增加md5
             */
            outputFiles = outputFiles.map(function (item) {
              return Object.assign(Object.assign({}, item), {
                content: "/* md5: " + (0, _utils.getMd5)(item.content) + " */\n" + item.content
              });
            });
            /**
             * 文件生成
             */

            _context3.next = 9;
            return generateFile(outputFiles);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
}